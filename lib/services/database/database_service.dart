import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:trucker/models/comment.dart';
import 'package:trucker/models/post.dart';
import 'package:trucker/models/users.dart';
import 'package:trucker/services/auth/auth_service.dart';

/*

DATABASE SERVICE

This class handles all the data from and to firebase

--------------------------------------------------------------------------------
- User profile
- Post message
- Likes
- Comments
- Account stuff (report / block / delete account)

 */

class DatabaseService {
  // get instance of firestore db & auth
  final _db = FirebaseFirestore.instance;
  final _auth = FirebaseAuth.instance;

  /*

    USER PROFILE  

    When a new users registers, we create an account for them, but let's also store
    their details in the database to display on their profile page.
  
  */

  Location? _location;
  // Save user info
  Future<void> saveUserInfoInFirebase({
    required String name,
    email,
  }) async {
    GeoPoint geoPoint = GeoPoint(0, 0);
    // get current uid
    String uid = _auth.currentUser!.uid;

    // extract username from email
    String username = email.split('@')[0];

    // create user profile
    UserProfile user = UserProfile(
        uid: uid,
        name: name,
        email: email,
        username: username,
        bio: '',
        role: 'user',
        location: geoPoint);

    // convert user into a map so that we can store in firebase
    final userMap = user.toMap();

    // save user info in firebase
    await _db.collection("Users").doc(uid).set(userMap);
  }

  // Get user info
  Future<UserProfile?> getUserFromFirebase(String uid) async {
    try {
      // retrieve user information from firebase
      DocumentSnapshot userDoc = await _db.collection("Users").doc(uid).get();

      // convert doc to user profile
      return UserProfile.fromDocument(userDoc);
    } catch (e) {
      print(e);
      return null;
    }
  }

  // Update user bio
  Future<void> updateUserBioInFirebase(String bio) async {
    // get current uid
    String uid = AuthService().getCurrentUid();

    // attempt to update in firebase
    try {
      await _db.collection("Users").doc(uid).update({'bio': bio});
    } catch (e) {
      print(e);
    }
  }

  //Delete user info
  Future<void> deleteUserInfoFromFirebase(String uid) async {
    WriteBatch batch = _db.batch();

    //delete user doc
    DocumentReference userDoc = _db.collection("Users").doc(uid);
    batch.delete(userDoc);

    //delete user posts
    QuerySnapshot userPosts =
        await _db.collection("Posts").where('uid', isEqualTo: uid).get();

    for (var post in userPosts.docs) {
      batch.delete(post.reference);
    }

    //delete user comments
    QuerySnapshot userComments =
        await _db.collection("Comments").where('uid', isEqualTo: uid).get();

    for (var comment in userComments.docs) {
      batch.delete(comment.reference);
    }

    //delete likes done by this user
    QuerySnapshot allPosts = await _db.collection("Posts").get();
    for (QueryDocumentSnapshot post in allPosts.docs) {
      Map<String, dynamic> postData = post.data() as Map<String, dynamic>;
      var likedBy = (postData['likedBy'] ?? []) as List<dynamic>;

      if (likedBy.contains(uid)) {
        batch.update(post.reference, {
          'likedBy': FieldValue.arrayRemove([uid]),
          'likes': FieldValue.increment(-1),
        });
      }
    }

    //commit batch
    await batch.commit();
  }

  /*

    POST MESSAGE  
  
  */
  // Post message
  Future<void> postMessageInFirebase(String message) async {
    //Try to post message
    try {
      // Get current uid
      String uid = _auth.currentUser!.uid;

      // use this uid to get the user's profile
      UserProfile? user = await getUserFromFirebase(uid);

      // create a new post
      Post newPost = Post(
        id: '', // auto generated by firebase
        uid: uid,
        name: user!.name,
        username: user.username,
        message: message,
        timestamp: Timestamp.now(),
        likeCount: 0,
        likedBy: [],
      );

      // Convert post object to map
      Map<String, dynamic> newPostMap = newPost.toMap();

      // add to firestore
      await _db.collection("Posts").add(newPostMap);
    }
    // catch any errors
    catch (e) {
      print(e);
    }
  }

  // Delete a post
  Future<void> deletePostFromFirebase(String postId) async {
    try {
      await _db.collection("Posts").doc(postId).delete();
    } catch (e) {
      print(e);
    }
  }

  // Get all post from firebase
  Future<List<Post>> getAllPostsFromFirebase() async {
    try {
      // Go to collection -> Posts
      QuerySnapshot snapshot = await _db
          .collection("Posts")
          // Arrange in chronological
          .orderBy('timestamp', descending: true)
          // get this data
          .get();

      // return as a list of post
      return snapshot.docs.map((doc) => Post.fromDocument(doc)).toList();
    } catch (e) {
      return [];
    }
  }

  // Get individual post
  /*

    LIKES  
  
  */

  //likes a post
  Future<void> toggleLikeInFirebase(String postId) async {
    try {
      //get current user id
      String uid = _auth.currentUser!.uid;

      //go to document for this post
      DocumentReference postDoc = _db.collection("Posts").doc(postId);

      //execute like
      await _db.runTransaction(
        (transaction) async {
          //get post data
          DocumentSnapshot postSnapshot = await transaction.get(postDoc);

          //get like of users who like this post
          List<String> likedBy =
              List<String>.from(postSnapshot['likedBy'] ?? []);

          //get like count
          int currentLikeCount = postSnapshot['likes'];

          //if user has not like this post yet -> then like
          if (!likedBy.contains(uid)) {
            //add user to like list
            likedBy.add(uid);

            //increase like count
            currentLikeCount++;
          }

          //if user has already like this -> unlike\
          else {
            //remove user from like post
            likedBy.remove(uid);

            //decreaselike count
            currentLikeCount--;
          }

          //update in firebase
          transaction.update(postDoc, {
            'likes': currentLikeCount,
            'likedBy': likedBy,
          });
        },
      );
    } catch (e) {
      print(e);
    }
  }

  /*

    COMMENTS
  
  */

  // add a comment to a post
  Future<void> addCommentInFirebase(String postId, message) async {
    try {
      //get current user
      String uid = _auth.currentUser!.uid;
      UserProfile? user = await getUserFromFirebase(uid);

      //create a new comment
      Comment newComment = Comment(
        id: '', //auto generated by firestore
        postId: postId,
        uid: uid,
        name: user!.name,
        username: user.username,
        message: message,
        timestamp: Timestamp.now(),
      );

      //convert comment to map
      Map<String, dynamic> newCommentMap = newComment.toMap();

      // to store in firebase
      await _db.collection("Comments").add(newCommentMap);
    } catch (e) {
      print(e);
    }
  }

  //delete a comment from a post
  Future<void> deleteCommentInFirebase(String commentId) async {
    try {
      await _db.collection("Comments").doc(commentId).delete();
    } catch (e) {
      print(e);
    }
  }

  //fetch comments for a post
  Future<List<Comment>> getCommentsFromFirebase(String postId) async {
    try {
      //get comments from firebase
      QuerySnapshot snapshot = await _db
          .collection("Comments")
          .where("postId", isEqualTo: postId)
          .get();

      //return as list of comments
      return snapshot.docs.map((doc) => Comment.fromDocument(doc)).toList();
    } catch (e) {
      print(e);
      return [];
    }
  }

  /*

    ACCOUNT STUFF  

    these are requirements if u wish to publish to the app store, play store
  
  */

  //Report post
  Future<void> reportUserInFirebase(String postId, userId) async {
    //get current user id
    final currentUserId = _auth.currentUser!.uid;

    //create a report map
    final report = {
      'reportedBy': currentUserId,
      'messageId': postId,
      'messageOwnerId': userId,
      'timestamp': FieldValue.serverTimestamp(),
    };

    //update in firestore
    await _db.collection("Reports").add(report);
  }

  //block user
  Future<void> blockUserInFirebase(String userId) async {
    //get current user id
    final currentUserId = _auth.currentUser!.uid;

    //add this user to blocked list
    await _db
        .collection("Users")
        .doc(currentUserId)
        .collection("BlockedUsers")
        .doc(userId)
        .set({});
  }

  //unblock user
  Future<void> unblockUserInFirebase(String blockedUserId) async {
    //get current user id
    final currentUserId = _auth.currentUser!.uid;

    //unblock in firebase
    await _db
        .collection("Users")
        .doc(currentUserId)
        .collection("BlockedUsers")
        .doc(blockedUserId)
        .delete();
  }

  //get list of blocked user ids
  Future<List<String>> getBlockedUidsFromFirebase() async {
    //get current user id
    final currentUserId = _auth.currentUser!.uid;

    //get data of blocked users
    final snapshot = await _db
        .collection("Users")
        .doc(currentUserId)
        .collection("BlockedUsers")
        .get();

    //return as a list of uids
    return snapshot.docs.map((doc) => doc.id).toList();
  }
}
